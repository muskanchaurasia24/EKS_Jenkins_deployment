pipeline{

    agent any
    parameters{
        choice(
            name: 'action',
            choices: 'create/delete',
            description: 'Choose create/Destroy' )
            string(
                name: 'awsAccountId', 
                description: " AWS Account ID", 
                defaultValue: '')
            string(
                name: 'Region',
                description: "Region of ECR", 
                defaultValue: '')
             string(
                name: 'EcrRepoName', 
                description: "name of the ECR", 
                defaultValue: '')
    }
    environment{
        // ACCESS_KEY = credentials('AWS_ACCESS_KEY_ID')
        // SECRET_KEY = credentials('AWS_SECRET_KEY_ID')
        AWS_ACCOUNT_ID = { params.awsAccountId }
        REGION = { params.Region }
        ECR_REPOSITORY = { params.EcrRepoName }
        ecrUrl = "${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com"
    }
    stages{
        stage('Git CheckOut'){
            when { expression { params.action == 'create' } }
            steps{
                gitCheckout(
                    branch: 'main',
                    url: "https://github.com/muskanchaurasia24/EKS_Jenkins_deployment.git"
                )
            }
        }
        stage('Unit Test Maven'){
            when { expression { params.action == 'create' } }
            steps{
                script{
                    sh 'mvn test'
                }
            }
        }
        stage('Static Code Analysis: SonarQube'){
            when{ expression { params.action == 'craete' } }
            steps{
                script{
                    sh 'mvn clean package sonar:sonar'
                }
            }
        }
        stage('Quality Gate Status check : Sonarqube'){
            when { expression { params.action == 'create' } }
            steps{
                script{
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage("Maven Build: maven"){
            when { expression { params.action == 'create' } }
            steps{
                script{
                    sh 'mvn clean install'
                }
            }
        }  
        stage('Docker Image Build: ECR'){
            when { expression { params.action == 'create' } }
            steps{
                script{
                    
                    sh """
                      docker build -t ${ECR_REPOSITORY} .
                      docker tag ${ECR_REPOSITORY}:latest ${ecrUrl}/${ECR_REPOSITORY}:latest
                      docker tag ${ECR_REPOSITORY}:${BUILD_NUMBER} ${ecrUrl}/${ECR_REPOSITORY}:${BUILD_NUMBER}
                      
                    """
                }
            }
        }
        stage('Docker Image Push : ECR'){
            when { expression { params.action == 'create' } }
            steps{
                script{
                    sh """
                      aws ecr get-login-password --region ${REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com
                      docker push ${ecrUrl}/${ECR_REPOSITORY}:${BUILD_NUMBER}
                      docker push ${ecrUrl}/${ECR_REPOSITORY}:latest
                    """
                }
            }
        }

    }
}